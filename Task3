package Qsort;

import java.io.*;
import java.util.Arrays;

/**
 * Created by Natalia on 28.03.2015.
 */
public class Sort {
    public static String[] strArray;
    public static double array_int;

    public static void main(String[] args) throws FileNotFoundException, IOException {

        String file = "C:\\fin.txt";
        args[1] = file;
        Sorting sorting = null;
        double[] array = valueArray(read(file));
        System.out.println(Arrays.toString(array));

        try {
            for (int g = 0; g < array.length; g++) {
                if (!(array[g] > Integer.MAX_VALUE) && (array[g] < Integer.MIN_VALUE)) {
                    if (!(args[0].equals(" "))) {
                        if (args[0].equals("shift")) {
                            System.out.println("shift");
                            sorting = new ShiftSort();
                        } else if (args[0].equals("bubble")) {
                            sorting = new BubbleSort();
                            System.out.println("bubble");
                        } else if (args[0].equals("quick")) {
                            //Сортування за допомогою фунції
                            System.out.println("quick");
                            System.out.println("Array is sorting!--->>");
                            myQSort(array, 0, array.length - 1);
                        }
                        sorting.sort(array);
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("Error! Enter new value in file!");
        }
        System.out.println(Arrays.toString(array));
    }


    public static double[] valueArray(String str) {
        int temp = 0;
        double array_int;
        String[] strValue = str.split("\n");
        double[] doubleArray = new double[strValue.length];
        for (int i = 0; i < doubleArray.length; i++) {
            array_int = Double.parseDouble(strValue[i]);
            doubleArray[temp] = array_int;
            temp++;
        }
        double[] doubleArrayMain = new double[temp];//результуючий масив без лишніх даних
        for (int i = 0; i < temp; i++) {
            doubleArrayMain[i] = doubleArray[i];
        }
        return doubleArrayMain;
    }

    //функції сортування масиву
    public static void sort(double[] array, int left, int right) {
        double tmp = array[left];
        array[left] = array[right];
        array[right] = tmp;
    }

    public static void myQSort(double[] array, int left, int right) {
        if (left >= right)
            return;
        sort(array, left, (left + right) / 2);
        int last = left;
        for (int i = last + 1; i <= right; ++i) {
            if (array[i] >= array[left]) {
                sort(array, ++last, i);
            }
        }
        sort(array, left, last);
        myQSort(array, left, last - 1);
        myQSort(array, last + 1, right);
    }

    public static String read(String fileName) throws FileNotFoundException {
        File file = new File(fileName);
        StringBuilder builder = new StringBuilder();
        try {
            BufferedReader in = new BufferedReader(new FileReader(file.getAbsoluteFile()));
            try {
                String s;
                while ((s = in.readLine()) != null) {
                    builder.append(s);
                    builder.append("\n");
                }
            } finally {
                in.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return builder.toString();
    }

}
